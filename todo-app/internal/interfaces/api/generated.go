// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// CreateTodoRequest Request body for creating a new todo item
type CreateTodoRequest struct {
	// Description Optional description of the todo item
	Description *string `json:"description,omitempty"`

	// Title Title of the todo item (required, non-empty)
	Title string `json:"title"`
}

// ErrorResponse Standard error response format
type ErrorResponse struct {
	// Error Error message
	Error string `json:"error"`
}

// TodoResponse Represents a todo item in responses
type TodoResponse struct {
	// Completed Whether the todo item is completed
	Completed bool `json:"completed"`

	// CreatedAt Creation timestamp in HTTP date format
	CreatedAt time.Time `json:"createdAt"`

	// Description Optional description of the todo item
	Description *string `json:"description,omitempty"`

	// Id Unique identifier for the todo item
	Id openapi_types.UUID `json:"id"`

	// Title Title of the todo item
	Title string `json:"title"`

	// UpdatedAt Last update timestamp in HTTP date format
	UpdatedAt time.Time `json:"updatedAt"`
}

// UpdateTodoRequest Request body for updating an existing todo item
type UpdateTodoRequest struct {
	// Description New description for the todo item
	Description *string `json:"description,omitempty"`

	// Title New title for the todo item (required, non-empty)
	Title string `json:"title"`
}

// CreateTodoJSONRequestBody defines body for CreateTodo for application/json ContentType.
type CreateTodoJSONRequestBody = CreateTodoRequest

// UpdateTodoJSONRequestBody defines body for UpdateTodo for application/json ContentType.
type UpdateTodoJSONRequestBody = UpdateTodoRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get all todos
	// (GET /api/todos)
	GetAllTodos(ctx echo.Context) error
	// Create a new todo
	// (POST /api/todos)
	CreateTodo(ctx echo.Context) error
	// Delete a todo
	// (DELETE /api/todos/{id})
	DeleteTodo(ctx echo.Context, id openapi_types.UUID) error
	// Get a specific todo
	// (GET /api/todos/{id})
	GetTodoById(ctx echo.Context, id openapi_types.UUID) error
	// Update a todo
	// (PUT /api/todos/{id})
	UpdateTodo(ctx echo.Context, id openapi_types.UUID) error
	// Mark a todo as complete
	// (PATCH /api/todos/{id}/complete)
	CompleteTodo(ctx echo.Context, id openapi_types.UUID) error
	// Mark a todo as incomplete
	// (PATCH /api/todos/{id}/incomplete)
	IncompleteTodo(ctx echo.Context, id openapi_types.UUID) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetAllTodos converts echo context to params.
func (w *ServerInterfaceWrapper) GetAllTodos(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAllTodos(ctx)
	return err
}

// CreateTodo converts echo context to params.
func (w *ServerInterfaceWrapper) CreateTodo(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateTodo(ctx)
	return err
}

// DeleteTodo converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteTodo(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteTodo(ctx, id)
	return err
}

// GetTodoById converts echo context to params.
func (w *ServerInterfaceWrapper) GetTodoById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTodoById(ctx, id)
	return err
}

// UpdateTodo converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateTodo(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateTodo(ctx, id)
	return err
}

// CompleteTodo converts echo context to params.
func (w *ServerInterfaceWrapper) CompleteTodo(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CompleteTodo(ctx, id)
	return err
}

// IncompleteTodo converts echo context to params.
func (w *ServerInterfaceWrapper) IncompleteTodo(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.IncompleteTodo(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/api/todos", wrapper.GetAllTodos)
	router.POST(baseURL+"/api/todos", wrapper.CreateTodo)
	router.DELETE(baseURL+"/api/todos/:id", wrapper.DeleteTodo)
	router.GET(baseURL+"/api/todos/:id", wrapper.GetTodoById)
	router.PUT(baseURL+"/api/todos/:id", wrapper.UpdateTodo)
	router.PATCH(baseURL+"/api/todos/:id/complete", wrapper.CompleteTodo)
	router.PATCH(baseURL+"/api/todos/:id/incomplete", wrapper.IncompleteTodo)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xaUXPbuBH+KztoH+5maIlyZF/Kpzpx6qrjpDeOMn24+AEmVxIuJMAAoH1qRv+9swAp",
	"kiIVWYqbzNl+k0RggV1837e7oL6wWGW5kiitYdEXZuIFZtx9fK2RW5yqRF3h5wKNpR8TNLEWuRVKsoiV",
	"D+BGJUuYKQ0xzRFyDhwk3oFViQJhMWMBy7XKUVuBpmNn0+y/3QeeQuNnUDOwC2yZxD94lqfIInaJXEu4",
	"UJBrNdc8y2gPKZfzgs+RBcwucxpmrBZyzlYBs8LSxM2Vp/RzZyn4SePnQmhMApBKHmGW2+XPvRtgAcuE",
	"vEQ5twsWjTorrwJW2WLRb+U2rtfD1M3vGFva4Butlb5Ckytpejb63nKZcJ0A0jjQ5UA6hIzbTrjdqK4V",
	"twhkaIwPU+2P810qCzNVyITt8sPb7/PD42ebG1eYazQEPuCNeAu59sh0fCHApmhp4U1z/1mgXaDeOD1h",
	"oJ7TcHLGU4PrLd8olSKXtGeHYkzOehDvSEFwtCJDY3mW02b/OZ3+Cgm3jfjXoXyrZADhMfyLSzgOw1MY",
	"nUThOApP4OLtlAWsnBIxMnBEdvsA+6MJI3rC/UGKzwWCSFBaMROonQZsX3R0/ALHJ6e/HOHLv90cjY6T",
	"F0d8fHJ6ND4+PR2NR7+MwzBsBqQoRPLN5D2IpgEr8mQbBi65seCff2cYbLDOR8cFI2BNiNcAbjrSR88P",
	"7ul+Iu8sOpGXgH8I4z4fKPXv8K4F2q8D6KFknlZ1j7rrfX+tp3FCzpTXNml57A4BMy5Sp8SZsvwTHyR4",
	"iykF9u9zejSIFQVH8oyMTctR8H4hMvHfoiMZ7AyMIAeADhvOfp3ATSFSC3fCLiikM5Wm6o4Ceq4yLuTR",
	"uRa3KOEcjZhLyLWQschTNIOPcroQxpngNMfAUhVglc/+GIBGqwXeYlCyJAAuE0iQ4FlH2gQfJTdwh2kK",
	"3EDG9Sc6ioy+VGAGpUHI6tvgo1wDPmKVHyxgt6iN93I0CAchOa9ylDwXLGIvBuHgBaGS24UD5JDnYkjb",
	"cN/m2It57wGlpVQYS6rC07Sx+SoKKJNcCWnJ6UJL40hBmAGuNV+CmIFUbp7xZPFO0Dm6RDJJWMQu0J6l",
	"6dRtiUBTpb7oCzsOwwoYKN1OeZ6nInaTh78bT6oSnG4GrXUpPJNNkWVcLynV+xHeA3KJwsbTAln0Wyun",
	"llmxkQN3SteGPO4gKWWS+6aC6qwblGsI846NrYKWY1YX3+SXr4eBw9Wb99NZkToClOyp3Dre7dao4dar",
	"QqSJs1cCeQ/nrkk3fLlOJ+1ASR/+qnHGIvaXYV3YD8uqftgqxlZrJXJI9UK0qRkV+Gvg07yTvUFpUN+i",
	"flOVoTUuJ9KiptLFj/D1bI3NdenKRO/AVTsKX3O+XVH3eDvZskLQ2O4F2rUQEFctnxsn7u779SpguTLb",
	"6kYnJ62+yOOHElCu1a1IMCnzEgmm6qnqnOxgOUgYqBKMmxBzSSX7DXoF6lOauqljPjuhsa9UstzzOOPa",
	"TOs01xypvGye5H4y0aH+HkfdbV1X7WxMWrDqKO3oAKX1SyXtMLjUVCoNmCKO0ZhZkabLZjgep+be/5Da",
	"YtSl4/YgrgI23luBHCWmVT3YSIwuWXtCbRUfR1g/ZoNkD6pAr3gCJSnhCBo7e9qi26cqm8K7Chp13fCL",
	"SFZecohhXfE5d7+THJscYzETcUOTb5YwOR98lFdlRXccjuGdgtc+8KBkA42+qvXCXI0fh2Mq+9ZtxVrj",
	"y7Uwgck5JAqNu2HZWhX6Ta61uiVV4572l9byDvfxZXyAuL1T9h/u/qerbuu7oR2kqe+QHhI10w3TT5kd",
	"Hibl/VlvSbKzxekngbAGPnxoUeGhoH2Blo7w1XKSPEzDsw2m1fXlc9bdJ+s6BKyp9awdj7udadO/v6nh",
	"mmdoURt3XbAR0EoNJufwEwlGef358yGXv4Is5twu6rstkbDN2r0ZpB3XxavrgOVFjwD6q88dNcA+zdZD",
	"i2R9N/tNvVpRm2lB1Zuv88ZX+zSe3HIZY7KpdrGSMebWdBTsrJ6wD6q799H36twOSRl+qT59KoX3O3Zu",
	"9wjv4cmkeRQ/Mqv0hvVp9nLPKfXRptRNWd3dqA4rPaH9/dkzLbfxoptE3nL9aUumbbztSf4PSfR1abu/",
	"jT4kb7xu/v9gg4YZ15+oPqh92pI3vvVlxKNtPXoi+KyXj1kvSRqqP/+0eXMP5azfDT9V7Wy9HX9o8Zys",
	"jT+cfNY2vy6gjaN9vr45VEMbQXxW0Sekoi3ydHSUZjpTfTp5qWL3ytn92ShDactlCdE6ZRFbWJtHw2FK",
	"4xbK2Ohl+DJkq+vV/wIAAP//6LC2oEwsAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
